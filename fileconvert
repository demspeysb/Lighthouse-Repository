import { PDFDocument, rgb } from 'pdf-lib';
import { saveAs } from 'file-saver';
import mammoth from 'mammoth';
import * as XLSX from 'xlsx';

document.getElementById('fileInput')?.addEventListener('change', async (event) => {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files.length > 0) {
        const file = input.files[0];
        const pdfDoc = await PDFDocument.create();

        if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = async function (e) {
                if (e.target?.result) {
                    const imageBytes = new Uint8Array(e.target.result as ArrayBuffer);
                    const image = await pdfDoc.embedJpg(imageBytes);
                    const page = pdfDoc.addPage([600, 400]);
                    const { width, height } = page.getSize();
                    page.drawImage(image, {
                        x: 50,
                        y: height - 350,
                        width: 500,
                        height: 300,
                    });
                }
                const pdfBytes = await pdfDoc.save();
                saveAs(new Blob([pdfBytes], { type: 'application/pdf' }), 'converted.pdf');
            };
            reader.readAsArrayBuffer(file);
        } else if (file.type === 'application/pdf') {
            saveAs(file, 'converted.pdf');
        } else if (file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
            const reader = new FileReader();
            reader.onload = async function (e) {
                if (e.target?.result) {
                    const result = await mammoth.convertToHtml({ arrayBuffer: e.target.result as ArrayBuffer });
                    addTextToPDF(pdfDoc, result.value);
                }
            };
            reader.readAsArrayBuffer(file);
        } else if (file.type.includes('spreadsheet')) {
            const reader = new FileReader();
            reader.onload = function (e) {
                const workbook = XLSX.read(e.target?.result, { type: 'binary' });
                let text = '';
                workbook.SheetNames.forEach((sheetName) => {
                    const sheet = workbook.Sheets[sheetName];
                    text += XLSX.utils.sheet_to_csv(sheet) + '\n';
                });
                addTextToPDF(pdfDoc, text);
            };
            reader.readAsBinaryString(file);
        } else {
            const text = await file.text();
            addTextToPDF(pdfDoc, text);
        }
    }
});

async function addTextToPDF(pdfDoc: PDFDocument, text: string) {
    const lines = text.match(/.{1,500}/g) || [];
    lines.forEach((line) => {
        const page = pdfDoc.addPage([600, 400]);
        const { height } = page.getSize();
        page.drawText(line, { x: 50, y: height - 50, size: 12, color: rgb(0, 0, 0) });
    });
    const pdfBytes = await pdfDoc.save();
    saveAs(new Blob([pdfBytes], { type: 'application/pdf' }), 'converted.pdf');
}
